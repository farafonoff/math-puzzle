{"version":3,"sources":["Result.js","Puzzle.js","App.js","passwordsService.js","serviceWorker.js","index.js"],"names":["Result","puzzles","answers","ciphertext","rezult","map","puzzle","eval","m","reduce","state","rightAnswer","index","isOk","String","good","bad","answersPwd","join","decrypted","useMemo","AES","decrypt","toString","Utf8","className","Puzzle","answer","updateAnswer","h","id","type","value","onChange","event","target","App","useState","passwordData","setPasswordData","animClass","setAnimClass","updateAnswers","step","setStep","useEffect","fetch","then","resp","json","data","passwords","today","Date","toDateString","find","entry","date","last","getTodayPuzzle","JSON","parse","localStorage","getItem","puzzlesCount","get","patchStep","shift","newStep","setItem","stringify","setTimeout","classNames","onClick","tabIndex","onTouchStart","preventDefault","onSubmit","newAnswers","saveAnswer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d9ce4060.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\r\nimport AES from 'crypto-js/aes';\r\nimport Utf8 from 'crypto-js/enc-utf8';\r\n\r\nfunction Result({puzzles, answers, ciphertext}) {\r\n    const rezult = puzzles\r\n    .map(puzzle => eval(puzzle.m))\r\n    .reduce((state, rightAnswer, index) => {\r\n        const isOk = (String(rightAnswer) === String(answers[index]));\r\n        return {\r\n            good: state.good + (isOk?1:0),\r\n            bad: state.bad + (isOk?0:1)\r\n        }\r\n    }, { good: 0, bad: 0});\r\n    const answersPwd = answers.join('_');\r\n    const decrypted = useMemo(() => {\r\n        return AES.decrypt(ciphertext, answersPwd).toString(Utf8);\r\n    }, [answersPwd, ciphertext]);\r\n    return (\r\n        <article>\r\n            <h1 className=\"App-goods\">Правильных ответов: {rezult.good}</h1>\r\n            <h1 className=\"App-bads\">Неправильных ответов: {rezult.bad}</h1>\r\n            <h1 className=\"App-bads\">Пароль: {decrypted}</h1>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\n\r\nfunction Puzzle({puzzle, answer, updateAnswer}) {\r\n    return (\r\n    <article>\r\n        <h1>{puzzle.h}</h1>\r\n        <input id=\"ianswer\" type=\"number\" value={answer} onChange={(event)=>{updateAnswer(event.target.value)}}></input>\r\n    </article>\r\n    );\r\n}\r\nexport default Puzzle;","import React, { useEffect, useState } from 'react';\nimport Puzzle from './Puzzle';\nimport './App.css';\nimport { loadData, getTodayPuzzle } from './passwordsService';\nimport { get } from 'lodash-es'\nimport Result from './Result';\nimport classNames from 'classnames';\n\nfunction App() {\n  const [passwordData, setPasswordData] = useState({});\n  const [animClass, setAnimClass] = useState('');\n  const [answers, updateAnswers] = useState([]);\n  const [step, setStep] = useState(0);\n  useEffect(() => {\n    loadData()\n    .then(data => getTodayPuzzle(data))\n    .then((data) => {\n      updateAnswers(JSON.parse(localStorage.getItem(`myanswers_${data.date}`)) || []);\n      return data;\n    })\n    .then(data => setPasswordData(data))\n  }, []);\n  const puzzlesCount = get(passwordData, 'puzzles.length', 0);\n  const patchStep = (shift) => {\n    let newStep = step + shift;\n    if (newStep < 0) {\n      newStep = 0;\n    }\n    if (newStep > puzzlesCount) {\n      newStep = puzzlesCount;\n    }\n    localStorage.setItem(`myanswers_${passwordData.date}`, JSON.stringify(answers));\n    switch(shift) {\n      case -1: setAnimClass('App-changeb'); break;\n      case 1: setAnimClass('App-changef'); break;\n    }\n    setTimeout(() => {\n      setAnimClass('')\n    }, 500);\n    setStep(newStep);\n  };\n  const saveAnswer = (step, answer) => {\n    const newAnswers = [...answers];\n    newAnswers[step] = answer;\n    updateAnswers(newAnswers);\n  };\n  if (puzzlesCount === 0) {\n    return (<h1>LOADING</h1>)\n  }\n  const onSubmit = (event) => {\n    patchStep(1);\n    event.preventDefault();\n  }\n  return (\n    <div className={classNames('App', 'App-change', animClass)}>\n      <header className={classNames('App-header')}>\n        <h1>Реши примеры, чтобы получить пароль</h1>\n        <nav className=\"App-nav\">\n          <button className=\"Nav-button\" onClick={() => patchStep(-1)} tabIndex=\"-1\" onTouchStart={event => event.preventDefault()}>Назад</button>\n          <h2>{step + 1}/{puzzlesCount}</h2>        \n          <button className=\"Nav-button\" onClick={() => patchStep(1)} tabIndex=\"-1\" onTouchStart={event => event.preventDefault()}>Вперед</button>\n        </nav>\n      </header>\n      {(step < puzzlesCount) &&  <form onSubmit={onSubmit}><Puzzle \n        puzzle={get(passwordData, ['puzzles', step], '')}\n        answer={get(answers, step, '')}\n        updateAnswer={answer => saveAnswer(step, answer)}></Puzzle></form>}\n      {(step === puzzlesCount) &&  <Result \n        puzzles={passwordData.puzzles} \n        answers={answers}\n        ciphertext={passwordData.ciphertext}></Result>}\n\n    </div>\n  );\n}\n\nexport default App;\n","import { last } from 'lodash-es';\r\nexport function loadData() {\r\n    return fetch('passwords.json')\r\n        .then(resp => resp.json());\r\n}\r\n\r\nexport function getTodayPuzzle(passwords) {\r\n    const today = new Date().toDateString();\r\n    const found = passwords.find(entry => entry.date === today);\r\n    return found || last(passwords);\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}